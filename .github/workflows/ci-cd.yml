name: API CI/CD Pipeline

# Required secrets:
# - SUPABASE_URL: Supabase project URL
# - SUPABASE_SERVICE_KEY: Supabase service key
# - JWT_SECRET: Secret for JWT token signing
# - APPLE_WEBHOOK_SECRET: Secret for Apple IAP webhook verification
# - GOOGLE_WEBHOOK_SECRET: Secret for Google IAP webhook verification
# - DIGITALOCEAN_ACCESS_TOKEN: DigitalOcean API token
# - DIGITALOCEAN_APP_ID: Production app ID in DigitalOcean
# - DIGITALOCEAN_STAGING_APP_ID: Staging app ID in DigitalOcean
# - SLACK_WEBHOOK_URL: Webhook URL for Slack notifications

on:
  push:
    branches: [main, develop, feat/*, fix/*]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run tests
        run: npm test
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          APPLE_WEBHOOK_SECRET: ${{ secrets.APPLE_WEBHOOK_SECRET }}
          GOOGLE_WEBHOOK_SECRET: ${{ secrets.GOOGLE_WEBHOOK_SECRET }}
          
      - name: Run IAP Verification Tests
        run: npm run test:iap
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
  
  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set Docker image name
        id: docker_meta
        run: |
          echo "image=ghcr.io/${{ github.repository_owner }}/corp-astro-api" >> $GITHUB_OUTPUT
          echo "tags=latest,${{ github.sha }}" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.docker_meta.outputs.image }}:latest
            ${{ steps.docker_meta.outputs.image }}:${{ github.sha }}
      
      # Production deployment
      - name: Install doctl for production
        if: github.ref == 'refs/heads/main'
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: doctl apps create-deployment $DO_APP_ID
        env:
          DO_APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
          
      # Staging deployment
      - name: Install doctl for staging
        if: github.ref == 'refs/heads/develop'
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: doctl apps create-deployment $DO_STAGING_APP_ID
        env:
          DO_STAGING_APP_ID: ${{ secrets.DIGITALOCEAN_STAGING_APP_ID }}
          
      # Notification
      - name: Notify deployment status
        run: |
          ENVIRONMENT="production"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENVIRONMENT="staging"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"API deployment to ${ENVIRONMENT} completed successfully!\"}" \
          $WEBHOOK_URL
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
